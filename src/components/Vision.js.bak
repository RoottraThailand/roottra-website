"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = require("react");
var framer_motion_1 = require("framer-motion");
var Vision = function () {
    return (<section id="vision" className="py-20 bg-black text-white">
      <div className="container mx-auto px-4">
        <framer_motion_1.motion.div initial={{ opacity: 0, y: 20 }} whileInView={{ opacity: 1, y: 0 }} transition={{ duration: 0.8 }} viewport={{ once: true }} className="text-center mb-16">
          <h2 className="text-4xl md:text-5xl font-bold mb-4 text-green-500">VISION</h2>
          <div className="w-24 h-1 bg-green-500 mx-auto"></div>
        </framer_motion_1.motion.div>
        
        <div className="flex flex-col items-center">
          <framer_motion_1.motion.div initial={{ opacity: 0, scale: 0.9 }} whileInView={{ opacity: 1, scale: 1 }} transition={{ duration: 0.8 }} viewport={{ once: true }} className="max-w-3xl text-center mb-12">
            <p className="text-2xl font-light leading-relaxed">
              To be the global standard for trusted climate data systems. Root Tra is driving a future where every environmental project is verifiable, efficient, and financially viable.
            </p>
          </framer_motion_1.motion.div>
          
          <framer_motion_1.motion.div initial={{ opacity: 0, y: 30 }} whileInView={{ opacity: 1, y: 0 }} transition={{ duration: 0.8, delay: 0.3 }} viewport={{ once: true }} className="w-full max-w-4xl">
            <div className="relative h-64 md:h-80 overflow-hidden rounded-lg">
              {/* Animated background with gradient and particles */}
              <div className="absolute inset-0 bg-gradient-to-r from-green-900/30 to-blue-900/30"></div>
              
              <div className="absolute inset-0 flex items-center justify-center">
                <div className="globe-visualization">
                  <div className="globe-container">
                    <div className="globe"></div>
                    <div className="globe-overlay"></div>
                    <div className="data-points">
                      {Array.from({ length: 10 }).map(function (_, i) { return (<div key={i} className="data-point" style={{
                left: "".concat(Math.random() * 100, "%"),
                top: "".concat(Math.random() * 100, "%"),
                animationDelay: "".concat(Math.random() * 5, "s")
            }}></div>); })}
                    </div>
                    <div className="data-connections">
                      {Array.from({ length: 15 }).map(function (_, i) { return (<div key={i} className="data-connection" style={{
                left: "".concat(Math.random() * 100, "%"),
                top: "".concat(Math.random() * 100, "%"),
                width: "".concat(Math.random() * 100 + 50, "px"),
                transform: "rotate(".concat(Math.random() * 360, "deg)"),
                animationDelay: "".concat(Math.random() * 5, "s")
            }}></div>); })}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </framer_motion_1.motion.div>
        </div>
      </div>
      
      <style jsx>{"\n        .globe-container {\n          position: relative;\n          width: 100%;\n          height: 100%;\n        }\n        \n        .globe {\n          position: absolute;\n          width: 200px;\n          height: 200px;\n          left: 50%;\n          top: 50%;\n          transform: translate(-50%, -50%);\n          border-radius: 50%;\n          background: radial-gradient(circle at 30% 30%, #1a5c1a, #0a380a);\n          box-shadow: 0 0 60px rgba(0, 255, 0, 0.2);\n          animation: rotate 20s linear infinite;\n        }\n        \n        .globe-overlay {\n          position: absolute;\n          width: 200px;\n          height: 200px;\n          left: 50%;\n          top: 50%;\n          transform: translate(-50%, -50%);\n          border-radius: 50%;\n          background: url(\"data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M0,0 L100,0 L100,100 L0,100 Z' fill='none' stroke='rgba(0,255,0,0.2)' stroke-width='0.5'%3E%3C/path%3E%3Cpath d='M0,20 L100,20 M0,40 L100,40 M0,60 L100,60 M0,80 L100,80 M20,0 L20,100 M40,0 L40,100 M60,0 L60,100 M80,0 L80,100' stroke='rgba(0,255,0,0.1)' stroke-width='0.2'%3E%3C/path%3E%3C/svg%3E\");\n          opacity: 0.5;\n          animation: rotate 15s linear infinite reverse;\n        }\n        \n        .data-point {\n          position: absolute;\n          width: 6px;\n          height: 6px;\n          background-color: #00ff00;\n          border-radius: 50%;\n          box-shadow: 0 0 10px #00ff00;\n          animation: pulse 3s infinite;\n        }\n        \n        .data-connection {\n          position: absolute;\n          height: 1px;\n          background: linear-gradient(90deg, transparent, #00ff00, transparent);\n          opacity: 0;\n          animation: fadeInOut 4s infinite;\n        }\n        \n        @keyframes rotate {\n          from { transform: translate(-50%, -50%) rotate(0deg); }\n          to { transform: translate(-50%, -50%) rotate(360deg); }\n        }\n        \n        @keyframes pulse {\n          0% { transform: scale(1); opacity: 0.7; }\n          50% { transform: scale(1.5); opacity: 1; }\n          100% { transform: scale(1); opacity: 0.7; }\n        }\n        \n        @keyframes fadeInOut {\n          0% { opacity: 0; }\n          50% { opacity: 0.8; }\n          100% { opacity: 0; }\n        }\n      "}</style>
    </section>);
};
exports.default = Vision;
